{"version":3,"sources":["logos/react_logo.svg","logos/spotify_logo.svg","logos/add.svg","functions/spotifyFunctions.js","AccountLogin.js","Greeting.js","LoginOrGreeting.js","GetUserPlaylists.js","GetPlaylistTracks.js","functions/prepareQuestionsFunctions.js","CreateQuestions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","spotifyWebApi","Spotify","spotifyAccessTokenAuth","accessToken","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getHashParams","access_token","setAccessToken","getUserPlaylists","_getUserPlaylists","apply","this","arguments","_callee","playlistsResponse","playlists","regenerator_default","a","wrap","_context","prev","next","sent","items","map","playlistObject","id","playlistName","name","abrupt","t0","stop","getUsername","_getUsername","_callee2","bulkUserData","_context2","getMe","Promise","resolve","console","error","stack","getSimplePlaylistTracks","_x","_getSimplePlaylistTracks","_callee3","playlistId","tracks","simpleTracks","_context3","getPlaylistTracks","trackObject","track","album","artistName","artists","albumName","trackName","AccountLogin","react_default","createElement","className","src","react_logo","alt","add","spotify_logo","href","authEndpoint","join","Component","Greeting","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isMoreThanOne","state","playlistCount","classes","username","spotifyFunctions","setState","display_name","length","LoginOrGreeting","isLogged","myState","myToken","src_Greeting_0","src_AccountLogin_0","GetUserPlaylists","renderListItems","o","key","value","selectedPlaylist","handleSelect","bind","assertThisInitialized","target","myPlaylist","onChange","GetPlaylistTracks","playlistTracks","receivedPlaylistId","RAWplaylistTracks","CLEANtracksList","myTracks","prevProps","fetchTracks","prepareQuestions","indexesForQuestions","indexesForWrongAnswers","i","question","C_answer","W_answer","dataset","mixIndexes","Array","from","Math","floor","random","slice","item1","String","split","item2","push","CreateQuestions","handleStartover","componentDidUpdate","current","correct","incorrect","questions","alertType","alertMessage","handleSelection","prepareQuestionsFunctions","checked","Score","QuestionsContainer","Result","rand1","rand2","answers","Fragment","htmlFor","type","alert","role","aria-label","onClick","App","handleStateChange","loginState","handleTokenChange","tokenState","token","handlePlaylistChange","playlistState","handlePlaylistTracks","tracksState","src_LoginOrGreeting","src_GetUserPlaylists_0","src_GetPlaylistTracks","src_CreateQuestions_0","rel","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e60cc89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react_logo.4a7e38a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/spotify_logo.977b3a3c.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.27f8ae7d.svg\";","import Spotify from \"spotify-web-api-js\";\r\nconst spotifyWebApi = new Spotify();\r\n\r\nexport function fromLoginUrl() {\r\n  const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n  const clientId = \"3c89e47259484dcb83163e8f47069497\";\r\n  const redirectUri = \"https://alitursucular.github.io/spotify-playlists-quiz-with-react-demo\";\r\n  // This is the data we ask for. Spotify will prompt it to the user for permission.\r\n  const scopes = [\r\n    \"playlist-read-private\",\r\n    \"playlist-read-collaborative\"\r\n  ];\r\n  return (\r\n    authEndpoint + \"?client_id=\" + clientId + \"&redirect_uri=\" + redirectUri + \"&redirect_uri=\" + scopes.join(\"%20\") + \"&response_type=token&show_dialog=true`\"\r\n  );\r\n}\r\n\r\nexport function spotifyAccessTokenAuth() {\r\n  const params = getHashParams();\r\n  const accessToken = params.access_token;\r\n  if (!accessToken) {\r\n    return false;\r\n  } else {\r\n    return accessToken;\r\n  }\r\n}\r\n\r\nfunction getHashParams() {\r\n  var hashParams = {};\r\n  var e,\r\n    r = /([^&;=]+)=?([^&;]*)/g,\r\n    q = window.location.hash.substring(1);\r\n  while ((e = r.exec(q))) {\r\n    hashParams[e[1]] = decodeURIComponent(e[2]);\r\n  }\r\n  return hashParams;\r\n}\r\n\r\nexport function setAccessToken(accessToken) {\r\n  spotifyWebApi.setAccessToken(accessToken);\r\n}\r\n\r\nexport async function getUserPlaylists() {\r\n  try {\r\n    const playlistsResponse = await spotifyWebApi.getUserPlaylists();\r\n    const playlists = playlistsResponse.items.map((playlistObject) => {\r\n      const { id, name } = playlistObject;\r\n      return { id: id, playlistName: name };\r\n    });\r\n    return playlists;\r\n  } catch (e) {\r\n    // console.error(\"Error: Attempting to get user playlists\", e);\r\n    // console.error(e.stack);\r\n    return [{ id: null, playlistName: \"We can't receive your playlists! Please login again..\" }];\r\n  }\r\n}\r\n\r\nexport async function getUsername() {\r\n  try {\r\n    const bulkUserData = spotifyWebApi.getMe();\r\n    return Promise.resolve(bulkUserData);\r\n  } catch (e) {\r\n    console.error('Catched error: ', e);\r\n    console.error(e.stack);\r\n  }\r\n}\r\n\r\n/***********************\r\n\r\nNOTE TO SELF: We could have done the above function as below.\r\n \r\nexport async function getUsername() {\r\n  const bulkUserData = spotifyWebApi.getMe();\r\n  return Promise.resolve(bulkUserData)\r\n}\r\n\r\ngetUsername().catch(e => console.error('Catched', e));\r\n\r\n***********************/\r\n\r\nexport async function getSimplePlaylistTracks(playlistId) {\r\n  try {\r\n    const tracks = await spotifyWebApi.getPlaylistTracks(playlistId);\r\n    const simpleTracks = tracks.items.map((trackObject) => {\r\n      const track = trackObject.track;\r\n      const album = trackObject.track.album;\r\n      const artist = trackObject.track.artists[0];\r\n      return {\r\n        artistName: artist.name,\r\n        albumName: album.name,\r\n        trackName: track.name,\r\n      };\r\n    });\r\n    return simpleTracks;\r\n  } catch (e) {\r\n    console.error(\"Error: Attempting to get playlist tracks\", e);\r\n    console.error(e.stack);\r\n  }\r\n}","/***********************\r\n\t\r\nThis simple presentational component mainly renders the login screen HTML. \r\nIt is a child of <LoginOrGreeting /> and it's main responsibility is to make \r\na login request to Spotify on user click. We see this component in action if:\r\n    1. user logs in for the first time,\r\n    2. login is unsuccessfull,\r\n    3. spotify session expired.\r\n\r\n***********************/\r\n\r\nimport React, { Component } from 'react';\r\nimport './AccountLogin.css';\r\nimport * as spotifyFunctions from './functions/spotifyFunctions.js'\r\nimport react_logo from './logos/react_logo.svg';\r\nimport spotify_logo from './logos/spotify_logo.svg';\r\nimport add from './logos/add.svg';\r\n\r\nclass AccountLogin extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-12 AccountLogin\">\r\n        <div className=\"col-md-12\">\r\n          <h5 className=\"mb-5 mt-2\">This app generates a simple quiz based on your Spotify playlists.</h5>\r\n        </div>\r\n        <div className=\"col-md-12\">\r\n          <img src={react_logo} className=\"AccountLogin-logo-react\" alt=\"logo\" />\r\n          <img src={add} className=\"AccountLogin-add-sign\" alt=\"logo\" />\r\n          <img src={spotify_logo} className=\"AccountLogin-logo-spotify\" alt=\"logo\" />\r\n        </div>\r\n        <div className=\"col-md-12 mt-5 mb-3\">\r\n          <a className=\"btn AccountLogin-link\"\r\n            href={spotifyFunctions.fromLoginUrl()}\r\n          > Login to Spotify\r\n          </a>\r\n        </div>\r\n        <p>\r\n          <small className=\"AccountLogin-warning-note\"><i>\r\n            We will request authorization from Spotify only to view your <b>name</b>, <b>playlists</b> and their <b>tracks</b>.<br />\r\n            None of this information will be recorded or shared with third parties.\r\n          </i></small>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AccountLogin;","/***********************\r\n\r\nThis is another simple component and a child of <LoginOrGreeting />. It renders \r\nthe welcome message. In addition to that, it displays how many playlists found \r\nin users Spotify account. (*Note that, we could split this component further. \r\nCurrently, it does not only render the HTML, but also fetches name, surname and \r\nnumber of playlists through its lifecycle method).\r\n\r\n***********************/\r\n    \r\nimport React, { Component } from 'react';\r\nimport './Greeting.css';\r\nimport * as spotifyFunctions from './functions/spotifyFunctions.js'\r\n\r\nclass Greeting extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.classes = props;\r\n        this.state = {\r\n            playlistCount: 0,\r\n            username: ''\r\n        }\r\n    }\r\n\r\n    isMoreThanOne = () => {\r\n        const playlistCount = this.state.playlistCount;\r\n        return (playlistCount > 1 ? 's' : '');\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await spotifyFunctions.setAccessToken(this.props.accessToken);\r\n        const playlists = await spotifyFunctions.getUserPlaylists();\r\n        const bulkUserData = await spotifyFunctions.getUsername();\r\n\r\n        this.setState({\r\n            username: bulkUserData.display_name,\r\n            playlistCount: playlists.length\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-12 mt-5 Greeting\">\r\n                <h2 className=\"mb-4\">Hello <span>{this.state.username}</span>!</h2>\r\n                <p className=\"mb-4\">We found <span>{this.state.playlistCount} playlist{this.isMoreThanOne()}</span> in your Spotify account.<br />\r\n                    Choose one from the following dropdown menu and start your quiz!</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Greeting;","/***********************\r\n\t\r\nThis component acts as a container for the login screen and greeting. It is the very first component\r\nthat App.js renders. Initially, isLogged and accessToken states are false and null. Therefore, it \r\nfirst renders <AccountLogin/>. Its main responsibility is to decide which component to render and \r\nreport this to its parent, App.js. \r\n\r\nOnce AccountLogin component renders, we obtain an ugly URL that contains our access_token. In our \r\ncomponentDidMount method, we parse this URL and set it to state (along with isLogged state). At this \r\nmoment, since we are logged in, our component renders <Greeting /> and passes accessToken props to it.\r\n\r\nNOTE: If we can't obtain the URL, we wouldn't have access_token. Therefore, our component would \r\nrender <AcountLogin /> again. However, this is not an endless loop! Since the generated link in\r\n<AcountLogin /> makes the actual login request to Spotify, it has to be clicked by the user.\r\n\r\n***********************/\r\n\r\nimport React, { Component } from 'react';\r\nimport AccountLogin from './AccountLogin';\r\nimport Greeting from './Greeting';\r\nimport * as spotifyFunctions from './functions/spotifyFunctions.js'\r\n\r\nclass LoginOrGreeting extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tisLogged: false,\r\n\t\t\taccessToken: null\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst accessToken = spotifyFunctions.spotifyAccessTokenAuth();\r\n\t\tif (accessToken) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisLogged: true,\r\n\t\t\t\taccessToken: accessToken\r\n\t\t\t})\r\n\t\t\tthis.props.myState(true);\r\n\t\t\tthis.props.myToken(accessToken);\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisLogged: false,\r\n\t\t\t\taccessToken: null\r\n\t\t\t})\r\n\t\t\tthis.props.myState(false);\r\n\t\t\tthis.props.myToken(null);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t!this.state.isLogged ? <AccountLogin /> : <Greeting accessToken={this.state.accessToken} />\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LoginOrGreeting;","/***********************\r\n\t\r\nThis component is not only container but also, presentational. We could have split it,\r\nbut for some reason I made it this way... \r\n\r\n<GetUserPlaylists /> is triggered by isLogged state in App.js (its parent) Its \r\nresponsibilities are:\r\n    1. getting user playlists from Spotify,\r\n    2. displaying them in a form of HTML select element,\r\n    3. making a callback to its parent for the selected playlist id,\r\n    4. staying alert for playlist changes made by the user, and repeat above.\r\n\r\nNOTE: We have an explanation about usage of componentDidUpdate method in <CreateQuestions />  \r\n\r\n***********************/\r\n\r\nimport React, { Component } from 'react';\r\nimport * as spotifyFunctions from './functions/spotifyFunctions.js';\r\nimport './GetUserPlaylists.css';\r\n\r\nclass GetUserPlaylists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlists: [],\r\n            selectedPlaylist: null\r\n        }\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n    }\r\n\r\n    handleSelect(e) {\r\n        this.setState({\r\n            selectedPlaylist: e.target.value,\r\n        })\r\n        this.props.myPlaylist(e.target.value);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await spotifyFunctions.setAccessToken(this.props.myToken);\r\n        const playlists = await spotifyFunctions.getUserPlaylists();\r\n        this.setState({\r\n            playlists: playlists\r\n        });\r\n    }\r\n\r\n    renderListItems = () => {\r\n        const playlistItems = this.state.playlists.map((o) => <option key={o.id} value={o.id}>{o.playlistName}</option>);\r\n        return (\r\n            playlistItems\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <select className=\"form-control\" onChange={this.handleSelect}>\r\n                <option key=\"0\" value=''>Choose your playlist!</option>\r\n                {this.renderListItems()}\r\n            </select>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetUserPlaylists;","/***********************\r\n\t\r\nThis component is a pure container component. It has nothing to render so, it is\r\nnot responsible for any type of UI presentation. It receives accessToken and the\r\nselected playlist as props from its parent App.js. It's resposibilities are:\r\n    1. get all tracks of the selected playlist,\r\n    2. clean this tracklist data and set state,\r\n    3. return this clean array of tracks to the parent,\r\n    4. be responsive for playlist changes (if props changes), and repeat above.\r\n\r\nNOTE: We have an explanation about usage of componentDidUpdate method in <CreateQuestions />  \r\n\r\n***********************/\r\n\r\nimport { Component } from 'react';\r\nimport * as spotifyFunctions from './functions/spotifyFunctions.js'\r\n\r\nclass GetPlaylistTracks extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playlistTracks: []\r\n        }\r\n    }\r\n\r\n    async fetchTracks(receivedPlaylistId) {\r\n        const RAWplaylistTracks = await spotifyFunctions.getSimplePlaylistTracks(receivedPlaylistId);\r\n        const CLEANtracksList = RAWplaylistTracks.map((o) => o.artistName + \"+\" + o.albumName + \"+\" + o.trackName);\r\n\r\n        this.setState({\r\n            playlistTracks: CLEANtracksList\r\n        });\r\n        this.props.myTracks(this.state.playlistTracks);\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.myPlaylist !== this.props.myPlaylist) {\r\n            this.fetchTracks(this.props.myPlaylist);\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await spotifyFunctions.setAccessToken(this.props.myToken);\r\n        this.fetchTracks(this.props.myPlaylist);\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default GetPlaylistTracks;","export function prepareQuestions(playlistTracks) {\r\n    let indexesForQuestions = [];\r\n    let indexesForWrongAnswers = [];\r\n    let i;\r\n    let dataset = [];\r\n    let question;\r\n    let C_answer;\r\n    let W_answer;\r\n\r\n/***********************\r\n\r\n    I first thought calculating unique indexes as below. However, if total number of tracks in the selected playlist\r\n    is even, then there is a posibilty of getting the same index for both indexesForQuestions and indexesForWrongAnswers.\r\n    Although there are ways to overcome this, I decided to get 10 unique indexes and split the array.\r\n\r\n    const indexesForQuestions = Array.from({ length: 5 }, () => Math.floor(Math.random() * playlistTracks.length));\r\n\r\n    for (j = 0; j < indexesForQuestions.length; j++) {\r\n        indexesForWrongAnswers.push(playlistTracks.length - indexesForQuestions[j]);\r\n    }\r\n\r\n    NOTE 1: This function does not look for duplicates. i.e.: Imagine a playlist consists of only Metallica songs.\r\n            In that case, \"Who / which group sings....?\" question will always have the same answer.\r\n    NOTE 2: This function does not check for 'undefined'. It is possible to have undefined answers in questions.\r\n    NOTE 3: This function does not check number of tracks in the selected playlist. This could cause duplicate questions\r\n            or same answers. Since I am selecting 10 random indexes from the playlist, any playlist with less than 10 \r\n            tracks would have duplicate indexes. We may experience this duplication either in questions or answers.\r\n            \r\n***********************/\r\n    \r\n    const mixIndexes = Array.from({ length: 10 }, () => Math.floor(Math.random() * playlistTracks.length));\r\n    indexesForQuestions = mixIndexes.slice(0, 5);\r\n    indexesForWrongAnswers = mixIndexes.slice(5, 10);\r\n\r\n    for (i = 0; i < indexesForQuestions.length; i++) {\r\n        let item1 = (String(playlistTracks[indexesForQuestions[i]])).split('+');\r\n        let item2 = (String(playlistTracks[indexesForWrongAnswers[i]])).split('+');\r\n\r\n        if (i % 2 === 0) {\r\n            question = \"Who / which group sings '\" + item1[2] + \"'?\";\r\n            C_answer = item1[0];\r\n            W_answer = item2[0];\r\n\r\n        } else {\r\n            question = \"Which '\" + item1[0] + \"' album is '\" + item1[2] + \"' on?\";\r\n            C_answer = item1[1];\r\n            W_answer = item2[1];\r\n        }\r\n        dataset.push({question, C_answer, W_answer});\r\n    }\r\n    return dataset;\r\n}","import React, { Component } from 'react';\r\nimport * as prepareQuestionsFunctions from './functions/prepareQuestionsFunctions.js'\r\nimport './CreateQuestions.css';\r\n\r\nclass CreateQuestions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            current: 0,\r\n            correct: 0,\r\n            incorrect: 0,\r\n            questions: [],\r\n            C_answer: [],\r\n            W_answer: [],\r\n            alertType: '',\r\n            alertMessage: ''\r\n        }\r\n        this.handleSelection = this.handleSelection.bind(this);\r\n    }\r\n\r\n    // componentDidUpdate method tends to run infinitely unless we put a condition.\r\n    // In our case, we placed a props condition to stop it from running so we could get the data and work on it.\r\n    // 'this.props.myTracks' carries all tracks of the selected playlist, so each time user makes a new list\r\n    // selection; 'myPlaylist' prop from 'GetPlaylistTracks' component changes. Thus, componentDidUpdate runs again.\r\n    // Lastly, once user completes answering all questions, we manually call this method to shuffle data and setState\r\n    // to defaults.\r\n    async componentDidUpdate(prevProps) {\r\n        if (prevProps.myTracks !== this.props.myTracks) {\r\n            const dataset = await prepareQuestionsFunctions.prepareQuestions(this.props.myTracks);\r\n            const question = dataset.map((o) => o.question);\r\n            const C_answer = dataset.map((o) => o.C_answer);\r\n            const W_answer = dataset.map((o) => o.W_answer);\r\n            // Since data is received async, we decided to get each value separately.\r\n            // Otherwise, below single line code would have worked fine.\r\n            \r\n            // const TRY = dataset.map((o) => [o.W_answer, o.C_answer, o.question]);\r\n            // Usage: dataset[...]\r\n\r\n            this.setState({\r\n                questions: question,\r\n                C_answer: C_answer,\r\n                W_answer: W_answer,\r\n                current: 0,\r\n                correct: 0,\r\n                incorrect: 0\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.componentDidUpdate(this.props.myTracks);\r\n    }\r\n\r\n    handleSelection(checked) {\r\n        if (this.state.C_answer[this.state.current] === checked) {\r\n            this.setState({\r\n                correct: this.state.correct + 1,\r\n                current: this.state.current + 1\r\n            })\r\n        } else {\r\n            this.setState({\r\n                incorrect: this.state.incorrect + 1,\r\n                current: this.state.current + 1\r\n            })\r\n        }\r\n    }\r\n\r\n    handleStartover = () => {\r\n        this.componentDidUpdate(this.props.myTracks);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-12 CreateQuestions mt-3\">\r\n                <Score\r\n                    correct={this.state.correct}\r\n                    incorrect={this.state.incorrect}\r\n                />\r\n                {this.state.current !== 5 ?\r\n                    <QuestionsContainer\r\n                        question={this.state.questions[this.state.current]}\r\n                        C_answer={this.state.C_answer[this.state.current]}\r\n                        W_answer={this.state.W_answer[this.state.current]}\r\n                        onChange={this.handleSelection}\r\n                    />\r\n                    :\r\n                    <Result\r\n                        correct={this.state.correct}\r\n                        handleStartover={this.handleStartover}\r\n                    />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateQuestions;\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div className=\"col-md-12 CreateQuestions-score-board\">\r\n            <span>Correct: <strong>{props.correct}</strong></span>\r\n            <span>Incorrect: <strong>{props.incorrect}</strong></span>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction QuestionsContainer(props) {\r\n    let rand1 = [];\r\n    let rand2 = [];\r\n    let answers = [props.C_answer, props.W_answer];\r\n    rand1 = Math.floor(Math.random() * answers.length);\r\n    (rand1 === 0) ? rand2 = 1 : rand2 = 0;\r\n    return (\r\n        <>\r\n            <p className=\"lead\">{props.question}</p>\r\n            <div className=\"form-check-inline\">\r\n                <label className=\"form-check-label\" htmlFor=\"radio1\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        className=\"form-check-input\"\r\n                        id=\"radio1\"\r\n                        checked=\"\"\r\n                        onChange={(e) => props.onChange(e.target.value)}\r\n                        value={answers[rand1]}\r\n                    />\r\n                    {answers[rand1]}\r\n                </label>\r\n            </div>\r\n            <div className=\"form-check-inline\">\r\n                <label className=\"form-check-label\" htmlFor=\"radio2\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        className=\"form-check-input\"\r\n                        id=\"radio2\"\r\n                        checked=\"\"\r\n                        onChange={(e) => props.onChange(e.target.value)}\r\n                        value={answers[rand2]}\r\n                    />\r\n                    {answers[rand2]}\r\n                </label>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Result(props) {\r\n    let alert = [];\r\n    if (props.correct < 3) {\r\n        alert = [\"alert-danger\", \"Well, you should listen more!\", \"😕\"];\r\n    } else if (props.correct > 3) {\r\n        alert = [\"alert-success\", \"WOW!! You are a true fan!\", \"😎\"];\r\n    } else {\r\n        alert = [\"alert-warning\", \"Hmm, you were almost there!\", \"😐\"];\r\n    }\r\n    return (\r\n        <div className={'alert ' + alert[0]} role=\"alert\">\r\n            <h2>{alert[1]} <span role=\"img\" aria-label={alert[2]}>{alert[2]}</span></h2>\r\n            <button\r\n                className=\"btn btn-link btn-start-over\"\r\n                onClick={() => props.handleStartover()}\r\n            >\r\n                start over?\r\n            </button>\r\n        </div>\r\n    );\r\n}","/***********************\n\t\nThis component is the mother of all components. It has one and only resposibility:\ncontrol the app flow. It is done via receiving props and callback props (react way \nof passing actions from parent to children).\n\nHere is the flow diagram of this SPA:\n  1. Render an unchanged header and a footer regardless of the app logic.\n  2. Render <LoginOrGreeting /> and receive App's isLogged and token states.\n  3. If islogged is true, render <GetUserPlaylists />, pass token as props and expect playlist id. Update selectedPlaylist state in the callback.\n  4. If playlist id is received, render <GetPlaylistTracks />, pass token + selectedPlaylist as props and expect tracks array. Update tracks state in the callback.\n  5. If tracks array has a length, render <CreateQuestions />, pass tracks array as props. (Last component doesn't have a callback).\n\nNOTE TO SELF:\nOnce user completes all 5 questions, we could have used callback props to trigger \nquiz complete messages. Since this component manages the app flow, it would have been\nbetter semantically. (On the other hand, I see no harm doing this way)\n\n***********************/\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport LoginOrGreeting from './LoginOrGreeting';\nimport GetUserPlaylists from './GetUserPlaylists';\nimport GetPlaylistTracks from './GetPlaylistTracks';\nimport CreateQuestions from './CreateQuestions';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLogged: false,\n      token: null,\n      selectedPlaylist: '',\n      tracks: []\n    };\n  }\n\n  handleStateChange = (loginState) => {\n    this.setState({\n      isLogged: loginState,\n    })\n  }\n\n  handleTokenChange = (tokenState) => {\n    this.setState({\n      token: tokenState,\n    })\n  }\n\n  handlePlaylistChange = (playlistState) => {\n    this.setState({\n      selectedPlaylist: playlistState,\n    })\n  }\n\n  handlePlaylistTracks = (tracksState) => {\n    this.setState({\n      tracks: tracksState,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header>\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <h1 className=\"font-weight-bold text-center mt-5 title\">Spotify Playlists Quiz</h1>\n            </div>\n          </div>\n        </header>\n        <main>\n          <div className=\"row\">\n            <LoginOrGreeting\n              myState={this.handleStateChange}\n              myToken={this.handleTokenChange}\n            />\n            <div className=\"col-md-12\">\n              {this.state.isLogged ? <GetUserPlaylists myToken={this.state.token} myPlaylist={this.handlePlaylistChange} /> : null}\n              {this.state.selectedPlaylist !== '' ? <GetPlaylistTracks myToken={this.state.token} myPlaylist={this.state.selectedPlaylist} myTracks={this.handlePlaylistTracks} /> : null}\n              {this.state.tracks.length !== 0 ? <CreateQuestions myTracks={this.state.tracks} /> : null}\n            </div>\n          </div>\n        </main>\n        <footer>\n          <div className=\"row\">\n            <div className=\"col-md-12 App-credential\">\n              <p className=\"mt-5\">\n                <small>\n                  - Developed by\n                <a\n                    href=\"https://alitursucular.github.io\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  > Ali Tursucular\n                </a>.\n              </small>\n              </p>\n            </div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}